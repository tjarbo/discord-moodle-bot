swagger: "2.0"
info:
  description: ""
  version: "2.0.0"
  title: "Fancy-Moodle-Discord-Bot Settings"
  license:
    name: "GNU AFFERO GENERAL PUBLIC LICENSE"
    url: "https://github.com/tjarbo/discord-moodle-bot/blob/main/LICENSE.md"
basePath: "/api"
tags:
- name: "Webauthn"
  description: "Use passwordless authentication!"
  externalDocs:
    description: "Find out more about jwt"
    url: "https://jwt.io/#debugger"
schemes:
- "http"
- "https"
paths:
  /webauthn/register:
    get:
      tags:
      - "Webauthn"
      summary: "Request challenge options for attestation"
      description: "Handles requests to create a new challenge that is required to register a new device."
      operationId: "authAttestationGetRequest"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Username of admin to register. Only between 8 and 64 characters allowed."
        required: true
        type: string
      - name: "token"
        in: "query"
        description: "Registration token in form of 000000-0000-0000-0000-000000 or more."
        required: true
        type: string
      responses:
        "200":
          description: "Attestation options have been created successfully!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid request schema. Read reponse for more information."
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 400
              data: {}
              error:
                - message: "\"username\" is required"
        "404":
          description: "Registration token not found"
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 404
              data: {}
              error:
                - message: "User test#0000 not found"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
    post:
      tags:
      - "Webauthn"
      summary: "Validates the attestation response done by user to register a new device"
      description: "Validates the attestation response done by user to register a new device"
      operationId: "authAttestationPostRequest"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Username of admin to register. Only between 8 and 64 characters allowed."
        required: true
        type: string
      - name: "token"
        in: "query"
        description: "Registration token in form of 000000-0000-0000-0000-000000 or more."
        required: true
        type: string
      - name: "attestationResponse"
        in: "body"
        description: "Value received from navigator.credentials.get()"
        required: true
        schema:
          type: object
          properties:
            unknown_structure:
              type: string
          
      responses:
        "200":
          description: "Registration was successful. Response contains jwt!"
          schema: 
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'success'
              code: 200
              data:
                accesstoken: "abcd.1234.efghi"
              error: []
        "400":
          description: "Invalid request schema. Read response for more information."
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 400
              data: {}
              error:
                - message: "\"username\" is required"
        "401":
          description: "Validation of attestation response failed."
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 401
              data: {}
              error:
                - message: "Challenge has not been solved correctly"
        "404":
          description: "Registration token not found"
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 404
              data: {}
              error:
                - message: "User test#0000 not found"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /webauthn/login:
    get:
      tags:
      - "Webauthn"
      summary: "Request challenge options for assertion"
      description: "Handles requests to create a new challenge that is required to login."
      operationId: "authAssertionGetRequest"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Username of registered admin. Only between 8 and 64 characters allowed."
        required: true
        type: string
      responses:
        "200":
          description: "Assertion options have been created successfully!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid request schema. Read response for more information."
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 400
              data: {}
              error:
                - message: "\"username\" is required"
        "404":
          description: "Registration token not found"
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 404
              data: {}
              error:
                - message: "User test#0000 not found"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
    post:
      tags:
      - "Webauthn"
      summary: "Validates the assertion response done by user to login"
      description: "Validates the assertion response done by user to login"
      operationId: "authAssertionPostRequest"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Username of registered admin. Only between 8 and 64 characters allowed."
        required: true
        type: string
      - name: "assertionResponse"
        in: "body"
        description: "Value received from navigator.credentials.get()"
        required: true
        schema:
          type: object
          properties:
            unknown_structure:
              type: string
          
      responses:
        "200":
          description: "Login was successful. Response contains jwt!"
          schema: 
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'success'
              code: 200
              data:
                accesstoken: "abcd.1234.efghi"
              error: []
        "400":
          description: "Invalid request schema. Read response for more information."
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 400
              data: {}
              error:
                - message: "\"username\" is required"
        "401":
          description: "Validation of assertion response failed."
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 401
              data: {}
              error:
                - message: "Challenge has not been solved correctly"
        "404":
          description: "Registration token not found"
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 404
              data: {}
              error:
                - message: "User test#0000 not found"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /fetch:
    get:
      tags:
        - "Moodle"
      summary: "Triggers bot to fetch new updates from moodle."
      description: >
        This endpoint allows the user to trigger the bot to fetch new updates from moodle, independent from
        the current interval. 
      operationId: "manualFetchRequest"
      security:
        - Bearer: []
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Fetch was successful"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Invalid token!"
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 401
              data: {}
              error:
                - message: "Invalid token!"
        "500":
          description: "Unable to fetch new updates from moodle. See logs for more information."
          schema:
            $ref: "#/definitions/ApiResponse"

  /settings/administrator:
    get:
      tags:
      - "Administrator"
      summary: "Gets administrator list"
      description: "Gets a list of all administrators from the database."
      operationId: "getAdministratorListRequest"
      security:
        - Bearer: []
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "success"
              code:
                type: "integer"
                format: "int32"
                example: 200
              data:
                type: "array"
                items: 
                  type: "object"
                  properties:
                    userName:
                      type: "string"
                      example: "DiscordUser#1234"
                    userId:
                      type: "string"
                      minLength: 18
                      maxLength: 18
                      example: "123456789123456789"
                    createdAt:
                      type: "number"
                      example: 1591198290510
              error:
                type: "array"
                items: 
                  properties:
                    message:
                      type: "string"
                example: []
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
    post:
      tags:
      - "Administrator"
      summary: "Creates administrator"
      description: "Creates a new Administrator"
      operationId: "addAdministratorRequest"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "Username and ID of the administrator"
        required: true
        schema:
          type: "object"
          properties:
            username:
              type: "string"
            userid:
              type: "string"
      responses:
        "201":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid request body"
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 400
              data: {}
              error:
                - message: "\"username\" is required"
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 401
              data: {}
              error:
                - message: "No authorization token was found"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 500
              data: {}
              error:
                - message: "Internal server error"
  /settings/administrator/{id}:
    delete:
      tags:
      - "Administrator"
      summary: "Deletes administrator"
      description: "Deletes an administrator from the database."
      operationId: "deleteAdministratorRequest"
      security:
        - Bearer: []
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User id"
        required: true
        type: "string"
        minLength: 18
        maxLength: 18
      responses:
        "204":
          description: "Deletion Successful"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid request parameter"
          schema:
            $ref: "#/definitions/ApiResponse"
          examples:
            application/json:
              status: 'error'
              code: 400
              data: {}
              error:
                - message: "\"id\" is required"
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Administrator not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /settings/refreshRate:
    get:
      tags:
      - "Moodle"
      summary: "Gets moodle fetch interval"
      description: "Returns the refresh interval in which the current data is requested and notifications are sent accordingly."
      operationId: "getRefreshRateRequest"
      security:
        - Bearer: []
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid request body"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
        "503":
          description: "Service Unavailable"
          schema: 
            $ref: "#/definitions/ApiResponse"
    put:
      tags:
      - "Moodle"
      summary: "Sets moodle fetch interval"
      description: "Sets the refresh interval in which the current dataset is requested and notifications are sent accordingly."
      operationId: "setRefreshRateRequest"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "New refresh rate in milliseconds"
        required: true
        schema:
          type: "object"
          properties:
            refreshRate:
              type: "number"
              example: 60000
              minimum: 5000
              maximum: 2147483647
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Invalid request body"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /settings/discordChannel:
    get:
      tags:
      - "Discord channel id"
      summary: "Gets discord channel id"
      description: "Returns the discord channel id in which the bot sends the notifications."
      operationId: "getDiscordChannelRequest"
      security:
        - Bearer: []
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid request body"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
        "503":
          description: "Service Unavailable"
          schema: 
            $ref: "#/definitions/ApiResponse"
    put:
      tags:
      - "Discord channel id"
      summary: "Sets discord channel id"
      description: "Writes the discord channel id in which the bot sends the notification to the database."
      operationId: "setDiscordChannelRequest"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        description: "New discord channel id"
        required: true
        schema:
         type: "object"
         properties:
           channelId:
             type: "string"
             example: 707590543160639540
             minLength: 18
             maxLength: 18
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Invalid request body"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /settings/courses:
    get:
      tags:
      - "Moodle"
      summary: "Gets course list"
      description: "Returns a list of all courses with the status whether the associated notifications are enabled or disabled."
      operationId: "getCourseListRequest"
      security:
        - Bearer: []
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              properties:
                courseId:
                 type: "number"
                 example: 5910
                 minimum: 0
                 maximum: 2147483647
                name:
                  type: "string"
                  example: "Kryptologie"
                isActive:
                  type: "boolean"
        "400":
          description: "Invalid request body"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "No courses found"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /settings/courses/{id}:
    put:
      tags:
      - "Moodle"
      summary: "Sets single course status"
      description: "Enables or disables the notifications assigned to the course id."
      operationId: "setCourseRequest"
      security:
        - Bearer: []
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Course id"
        required: true
        type: "number"
        minimum: 0
        maximum: 2147483647
      - name: "body"
        in: "body"
        description: "Course active status"
        required: true
        schema:
         type: "object"
         properties:
           isActive:
             type: "boolean"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: "Invalid request body"
          schema:
            $ref: "#/definitions/ApiResponse"
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "404":
          description: "Course not found"
          schema:
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
  /settings/status:
    get:
      tags:
      - "Status"
      summary: "Gets bot status information and current settings"
      description: "Returns a list of objects that show the current connection, discord and fetch status and settings."
      operationId: "getStatusRequest"
      security:
        - Bearer: []
      produces:
      - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "object"
            properties:
              status:
                type: "string"
                example: "success"
              code:
                type: "integer"
                format: "int32"
                example: 200
              data:
                type: "object"
                properties:
                  moodleConnectionStatus:
                   type: "string"
                   example: "Ok"
                  moodleLastFetchTimestamp:
                    type: "number"
                    example: "1598862126"
                  moodleNextFetchTimestamp:
                    type: "number"
                    example: "1598865126"
                  moodleCurrentFetchInterval:
                    type: "number"
                    example: "900000"
                  discordLastReadyTimestamp:
                    type: "number"
                    example: "1598861227218"
                  discordCurrentChannelId:
                   type: "string"
                   example: "703550541160639540"
                  discordCurrentChannelName:
                   type: "string"
                   example: "moodle-updates"
              error:
                type: "array"
                items: 
                  properties:
                    message:
                      type: "string"
                example: []
        "401":
          description: "Invalid token!"
          schema: 
            $ref: "#/definitions/ApiResponse"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/ApiResponse"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: header
definitions: 
  ApiResponse:
    type: "object"
    properties:
      status:
        type: "string"
      code:
        type: "integer"
        format: "int32"
      data:
        type: "object"
      error:
        type: "array"
        items: 
          properties:
            message:
              type: "string"
externalDocs:
  description: "Get source code"
  url: "https://github.com/tjarbo/discord-moodle-bot/"
